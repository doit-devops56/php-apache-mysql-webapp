name: Build and upload docker image
on:
  pull_request:
    branches:
      - "master"
  push:
    branches:
      - '**'

      
jobs:
  build-upload:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v3

      
      - name: Check if docker available or not
        run : which docker
      

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: build php in docker
        run : docker build -t php_apache_mysql:latest .
      
      
      - name: upload docker images
        run: |
          docker images
          docker tag php_apache_mysql:latest dpaktamang/php_apache_mysql:latest

          # push
          docker push dpaktamang/php_apache_mysql:latest
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    needs: build-upload
    steps:
      - uses: actions/checkout@v3
      
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false 
      - name: create ec2 instance
        working-directory: .github/IaC
          run: |
          public_ip=$(aws ec2 describe-instances --filters "Name=tag-value,Values=php-instance-dubesh" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          if [ -z $public_ip ]; then
            terraform init
            terraform validate
            terraform plan
            terraform apply -auto-approve
          fi
   
      - name: update php app
        working-directory: .github/scripts
        run: | 
          sudo apt-get update
          sudo apt-get install -y expect
          echo updating app
          public_ip=$(aws ec2 describe-instances --filters "Name=tag-value,Values=mern-instance" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          sleep 10
          ./deploy.sh $public_ip:
